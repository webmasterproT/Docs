**Planning repo scaffolding**

# Tiation Infra Starter

This repository glues **Terraform**, **Ansible**, and **GitHub¬†Actions** together so you can spin up infrastructure, configure it, and deploy branded Theia ‚Äî all from one place.

```
.
‚îú‚îÄ‚îÄ .github/workflows/      # CI/CD
‚îú‚îÄ‚îÄ terraform/              # Infra‚Äëas‚ÄëCode
‚îî‚îÄ‚îÄ ansible/                # Host configuration
```

1. **Terraform** provisions a VM + DNS (DigitalOcean & Cloudflare by default).
2. **Ansible** installs Docker, Tailscale and runs the branded Theia container.
3. **GitHub¬†Actions** automate:

   ‚Ä¢ `terraform plan / apply`

   ‚Ä¢ Ansible runs after apply

   ‚Ä¢ Nightly Backblaze backups

   ‚Ä¢ Monthly IPFS snapshot

> Fill in your secrets in the repo ‚Üí *Settings ‚Üí Secrets¬†&¬†Variables*.



### üöÄ Starter repo created!

[Download the starter kit](sandbox:/mnt/data/tiation_infra_starter.zip)

It contains:

```
.
‚îú‚îÄ‚îÄ README.md                   # Quick‚Äëstart guide
‚îú‚îÄ‚îÄ terraform/                  # DigitalOcean + Cloudflare sample
‚îú‚îÄ‚îÄ ansible/                    # Playbook that installs & runs branded Theia
‚îî‚îÄ‚îÄ .github/
    ‚îî‚îÄ‚îÄ workflows/              # Terraform plan + Ansible follow‚Äëup
```

---

## üü¢ How Ansible ‚Äúknows‚Äù it‚Äôs idempotent

1. **Module design**
   Most core modules compare the **desired state** you declare with the **current state** on the host.
   *Example*: `apt:` will run `apt-get install` only if the package isn‚Äôt already the requested version.

2. **`changed` flag**
   Each task returns either‚ÄØ`changed=false` (nothing done) or‚ÄØ`changed=true` (state mutated).
   Your play recap shows this, and CI pipelines can fail if unexpected changes appear.

3. **Check‚Äëmode (`--check`)**
   Run‚Äëthrough that simulates tasks. Modules report what **would** change without touching the host.

4. **Stat / checksum tricks**

   * **File modules** compute hashes before copying.
   * **Lineinfile / blockinfile** edit only if the exact text is missing.
   * **docker\_container** inspects the container spec before recreating it.

5. **Idempotent patterns** you control

   * Use *declarative* modules (e.g., `apt`, `service`, `user`) instead of raw `shell`.
   * When you must use `command/shell`, add guards like `creates=` or `unless=`.
   * Leverage **handlers**: run expensive steps only when a prerequisite task reports `changed=true`.

6. **Testing tools**

   * **`ansible-lint`** flags non‚Äëidempotent patterns.
   * **Molecule** can spin up a container/VM, apply the playbook twice, and assert zero changes on the second run.

> **Rule of thumb:** if you can run `ansible-playbook ‚Ä¶` twice in a row and see ‚Äúchanged=0‚Äù, your playbook is idempotent.

---

### Next steps

1. Unzip the kit, set secrets, and push to an empty GitHub repo.
2. Run `terraform init` & `apply` locally once, or let the **Terraform** workflow do it after you add secrets.
3. Tweak `ansible/playbook.yml` to point at your branded Theia image and any extra hardening tasks.
4. Try `ansible-playbook -i inventory.ini playbook.yml --check` to watch idempotency in action.

Need help expanding the playbook check my other work!

Created 2025-05-06.
